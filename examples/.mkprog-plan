mkprog try-analyze "Create a Go program called 'try-analyze' that does the following:

1. Analyze the current Git repository, focusing on:
   - Recent commit history
   - 'try' attempts recorded as Git notes
   - Current branch status and differences

2. Functionality:
   - Retrieve the last N commits (configurable, default 10)
   - Extract 'try' attempts from Git notes
   - Analyze the current branch status (modified files, staged changes)
   - Use the langchaingo library to interact with an AI model for analysis

3. AI Analysis:
   - Feed the collected data to the AI model
   - Ask the AI to analyze patterns in the 'try' attempts
   - Request suggestions for potential edits or improvements based on the analysis

4. Command-line flags:
   - --commits N: Number of recent commits to analyze (default 10)
   - --branch: Analyze a specific branch instead of the current one
   - --verbose: Provide more detailed output

5. Output:
   - Summary of analyzed data
   - AI-generated analysis of patterns in 'try' attempts
   - Suggested edit or improvement

6. Error handling:
   - Properly handle Git command errors
   - Handle API errors when interacting with the AI model
   - Provide informative error messages

7. Use Go best practices:
   - Implement a 'run' function for the main logic
   - Use the 'os/exec' package for running Git commands
   - Use the langchaingo library for AI interactions
   - Implement proper error handling and propagation

8. Create a README.md explaining how to use 'try-analyze' and its flags

9. Include an MIT license file

Ensure the program is well-structured, efficient, and follows idiomatic Go patterns. Pay special attention to handling large repositories and potentially long-running AI analysis operations."
